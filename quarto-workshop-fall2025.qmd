---
title: A presentation with Polylux via Quarto
subtitle: using `projector`
author:
  - name: Author One
    affiliations:
      - name: Harvard University
  - name: Author Two
    affiliations:
      - name: Yale University
date: today
format:
  projector-typst:
    keep-typ: false
bullet-incremental: true
toc: true
handout: false
theme: greyer.typ
#background-image: projector.png
---

# A Presentation Demo

## Introduction

`projector` is a [Quarto](https://quarto.org/) extension to create [Polylux](https://github.com/polylux-typ/polylux) presentations in [Typst](https://typst.app/) while only writing [Markdown](https://daringfireball.net/projects/markdown/).

It is designed to mimic all of the properties of beamer so that you can (hopefully) convert just by:

::: {.nonincremental}

1. Changing the format to `projector-typst`
2. Changing `incremental` to `bullet-incremental`
3. Setting a theme with a Typst file

:::

This Quarto extension is written by [Christopher T. Kenny](https://christophertkenny.com/).

## More Information

This demo explains the template.
For more information, see the [readme](https://github.com/christopherkenny/projector/blob/main/README.md).

Please report any issues or make suggestions at <https://github.com/christopherkenny/projector/issues>.


Look at some theme options at: <https://github.com/christopherkenny/projector-themes>

# Features

## Incremental Lists

- First item
- Second item
- Third item

## Non-Incremental

:::{.nonincremental}

- one-th
- two-th
- three-th

:::

## Numbered lists

1. A one
2. And a twoooo

## Non-Incremented Numbered lists

:::{.nonincremental}
1. And 3 (really 1) but static
2. And 4 (really 2)
:::

## And manual pauses

Sometimes you write text

. . .

that needs time to be ready


---

An untitled slide?

Yes! It's possible with `---`.

## Split slides

::::  {.columns align=top .onlytextwidth}

::: {.column width="40%" align=center}
left column in 40% column
center aligned
:::

::: {.column width="60%"}
right column with 60% column
right aligned
:::

::::


## Split slides, fixed width and centered

:::: {.columns align=center totalwidth=20em}

::: {.column width="40%"}
contents...
:::

::: {.column width="60%" align=bottom}
contents...
:::

::::

## Images

![](projector.png){width=3in fig-align="center"}

## Code

Include code with triple backticks:

```r
library(dplyr)

starwars %>%
  filter(species == "Droid")
```

## Adding speaker notes

Polylux uses pdfpc to store notes.
You can create them via

```
:::{.notes}
Adding this will create notes readable to the presenter in pdfpc.
:::
```
:::{.notes}
Adding this will create notes readable to the presenter in pdfpc.
:::

# Callouts

## Callouts: Mapped from Beamer

We can use the heading values to control callouts, like so:

### Caution! {.alert}

This is an important warning.

### Try This {.example}

This demonstrates something useful.

### Note

Plain information.

## Callouts: Custom to this template

And here's a little extra flair

### Tip {.tip}

A tip for the viewer

### Reminder {.reminder}

A thing to remember

### Warning! {.warning}

For a little less caution than an alert


# Typst Specialties

## Using Typst functions

This template comes pre-equipped with a Quarto extension that converts divs and spans to function calls.
To use any Typst functions, list them under the `functions` key in the YAML header.

```yaml
functions: align
```
Then you can use them like:

```markdown
::: {.align arguments="right"}
this
:::
```

or

```markdown
[other text]{.align arguments="right"}
```

For full documentation of this feature, see the [`typst-function` extension page](https://github.com/christopherkenny/typst-function).

# Styling your slides

## YAML-controlled features

Some features can be controlled via yaml options.

:::{.nonincremental}

- `mainfont`: sets font (see options with `quarto typst fonts`)
- `margin`: sets page margins
- `papersize`: the paper size to use (choices listed [here](https://typst.app/docs/reference/layout/page/))
- `toc`: whether to display the table of contents
- `toc_title`: title of the table of contents
- `background-image`: the path to an image to put as the background
- `handout`: display as a handout, removing incrementals

:::

## Template files

For additional customization, you can supply a template style file to use.

This must contain a function `projector-theme` that contains your styling choices.
That file will be imported before any of the YAML options, so the YAML options take precedence.

This should look like

```typ
#let projector-theme(doc) = {
  // your styling choices
  doc
}

```

Omitting `doc` at the end will create a single, empty slide as your output.

To supply a template, add `theme: path_to_file.typ` to the YAML.


## Controlling Title, ToC, and Sections Slides

To modify these three particular slides, you need to adjust them in your template file.
Simply redefine the functions that produce them with your own (pretty) version.

The function signatures should be as follows:

:::{.nonincremental}

- `title-slide(title, subtitle, authors, date)`
- `toc-slide(toc_title)`
- `section-slide(name)`

:::

You do not need to use the arguments in the functions, but they must take those arguments or it will break.
